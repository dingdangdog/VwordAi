name: Electron Builder

on:
  push:
    tags:
      - v*.*.*

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --match 'v*' | sed -n 's|^v\([0-9]*\.[0-9]*\.[0-9]*\)\(-.*\)\{0,1\}|\1|p')
          echo "VERSION=$VERSION" >> $GITHUB_ENV  # Store version as an environment variable

      - name: Git config
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: 🎉Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          body: v${{ env.VERSION }}

  electron-package:
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, macos-13, ubuntu-latest, windows-latest]
        include:
          - os: macos-latest
            package_command: npm run builder -- --mac --arm64
            platform: Mac
            arch: arm64
          - os: macos-13
            package_command: npm run builder -- --mac --x64
            platform: Mac
            arch: x64
          - os: ubuntu-latest
            package_command: npm run builder -- --linux
            platform: Linux
            arch: x64
          - os: windows-latest
            package_command: npm run builder -- --win
            platform: Windows
            arch: x64

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        shell: bash
        run: |
          VERSION=$(git describe --tags --always --match 'v*' | sed -n 's|^v\([0-9]*\.[0-9]*\.[0-9]*\)\(-.*\)\{0,1\}|\1|p')
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      # 安装指定 Python
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # 前端打包
      - name: Install UI dependencies
        run: cd ui && npm ci --no-interactive

      - name: Build UI
        run: cd ui && npm run build-only

      - name: Install Main dependencies
        run: npm ci --no-interactive

      - name: Package Application
        env:
          NODE_ENV: production
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: ${{ matrix.package_command }}

      - name: Show Builds
        if: ${{ matrix.platform == 'Windows' }}
        run: dir package
      - name: Show Builds
        if: ${{ matrix.platform != 'Windows' }}
        run: ls -la package

      - name: Mac Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.platform == 'Mac' }}
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: 🎉Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          append_body: true
          # VwordAi-2.0.0-arm64.dmg / VwordAi-2.0.0-x64.dmg
          files: |
            package/VwordAi-${{ env.VERSION }}-${{ matrix.arch }}.dmg
            package/VwordAi-${{ env.VERSION }}-${{ matrix.arch }}.zip
            package/latest-mac.yml

      - name: Linux Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.platform == 'Linux' }}
        with:
          token: ${{ secrets.GH_TOKEN }}
          name: 🎉Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          append_body: true
          # VwordAi_2.0.0_amd64.deb/VwordAi-2.0.0.AppImage
          files: |
            package/VwordAi_${{ env.VERSION }}_amd64.deb
            package/VwordAi-${{ env.VERSION }}.AppImage
            package/latest-linux.yml

      - name: Windows Release
        uses: softprops/action-gh-release@v2
        if: ${{ matrix.platform == 'Windows' }}
        with:
          # make_latest: "true"
          token: ${{ secrets.GH_TOKEN }}
          name: 🎉Release v${{ env.VERSION }}
          tag_name: v${{ env.VERSION }}
          append_body: true
          # VwordAi Setup 2.0.0.exe
          files: |
            package/VwordAi-Setup-${{ env.VERSION }}.exe
            package/latest.yml
